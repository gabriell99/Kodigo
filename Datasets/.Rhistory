setwd("C:/KodigoGG/Datasets")
misdatos <- read.table("contaminacion.txt",sep="\t",header=TRUE)
head(misdatos)
set.seed(1) #punto de arranque de números aleatorios
mp25 <- round(rnorm(20,30,3),2)
mp25
misdatos2 <- data.frame(mp25,misdatos)
head(misdatos2)
varX <- rnorm(30,0,1)
varY <- rnorm(30,0,1)
plot(x=varX,y=varY, main="mi primer gráfico")
plot(varX,varY, main="mi primer gráfico")
varX <- rnorm(80,4,12)
varX
hist(x=varX, main="mi primer histograma")
boxplot(varX, main="mi primer boxplot")
varX2 <- c(rnorm(80,4,12),rnorm(5,60,20))
boxplot(varX2, main="boxplot con datos atípicos")
attach(misdatos)
boxplot(mp10~estacion, main="mi segundo boxplot")
boxplot(mp10~estacion, main="Niveles contaminantes en zona norte",
xlab="Ciudad de monitoreo",
ylab="Material particulado 10um", col="yellow")
boxplot(mp10~estacion, main="Niveles contaminantes en zona norte",
xlab="Material particulado 10um",
ylab="Ciudad de monitoreo", col=c("red","green"),
boxwex=0.5, horizontal = TRUE)
x <- rnorm(12,5,1)
y <- rnorm(12,5,1)
plot(x,y, main="usando points() - 1 punto", pch=16, col="blue")
# agregando puntos adicionales
points(x=5,y=5, pch=16, col="red", cex=2)
plot(x,y, main="usando points() - 3 puntos", pch=16, col="blue")
xn <- c(4.5, 5, 5.5)
yn <- c(4.5, 5, 5.5)
points(xn,yn, pch=16, col="red", cex=2)
recta <- lm(y~x)
plot(x,y, main="usando abline()", pch=16, col="blue")
# estimamos la recta de regresión lineal
recta <- lm(y~x)
abline(recta, col="red")
plot(x,y, main="usando abline()", pch=16, col="blue")
# estimamos la recta de regresión lineal
recta <- lm(y~x)
abline(recta, col="red")
abline(h=6,v=6, lty="longdash")
plot(x,y, main="usando abline()", pch=16, col="blue")
# estimamos la recta de regresión lineal
recta <- lm(y~x)
abline(recta, col="red")
text(x=5, y=5.5, labels="recta de regresión", col="red")
plot(x,y, main="usando abline()", pch=16, col="blue")
# estimamos la recta de regresión lineal
recta <- lm(y~x)
abline(recta, col="red")
mtext(text = "texo abajo", side = 1, col="blue")
mtext(text = "texo izquierda", side = 2, col="blue")
mtext(text = "texo arriba", side = 3, col="blue")
mtext(text = "texo derecha", side = 4, col="blue")
plot(x,y, main="usando abline()", pch=16, col="blue")
# estimamos la recta de regresión lineal
recta <- lm(y~x)
abline(recta, col="red")
mtext(text = "texo arriba", side = 3, line = -2, col="blue")
mtext(text = "texo arriba", side = 3, line = -1, col="blue")
mtext(text = "texo arriba", side = 3, line = 0, col="blue")
mtext(text = "texo arriba", side = 3, line = 1, col="blue")
boxplot(mp10~estacion, main="Niveles contaminantes en zona norte",
ylab="Material particulado 10um",
col=c("green", "yellow"), xaxt="n")
legend("topleft", inset=.02, title="Zona de monitoreo",
c("Piura", "Trujillo"), fill=c("green", "yellow"),
horiz=TRUE, cex=0.8)
View(misdatos2)
View(recta)
View(misdatos)
# Generate some data
x<-1:10; y1=x*x; y2=2*y1
plot(x, y1, type="b", pch=19, col="red", xlab="x", ylab="y")
# Add a line
lines(x, y2, pch=18, col="blue", type="b", lty=2)
# Add a legend
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
library(ggplot2)
data(iris)
ggplot(data = iris, aes(x= Petal.Length, y=Sepal.Width, color=Species)) +
geom_point()
# geometrics: geom_hist()
ggplot(data = iris, aes(x = Petal.Length, fill=Species))+
geom_histogram() +
facet_wrap(~ Species, ncol=1)
ggplot(data = iris, aes(x=Species, y=Petal.Length,fill=Species))+
geom_boxplot() +
ggtitle("Comparación de longitud por especie")
x <- 1:20
y <- x ^ 2 + runif(20, 0, 100)
df <- data.frame(x = x, y = y)
ggplot(df, aes(x = x, y = y)) +
geom_line() +
geom_point()
library(httr)
library(jsonlite)
url <- "https://api.weatherapi.com/v1/forecast.json?key=56a3ba13d325472aaf930648241909&q=Cincinnati&days=10&aqi=no&alerts=no"
response <- GET(url)
response
weather_data <- fromJSON(content(response, "text", encoding = "UTF-8"))
forecast <- weather_data$forecast$forecastday
forecast
for (day in forecast) {
print(day[1:1])  # Muestra las primeras 3 columnas (índices 1 a 3)
}
for (day in forecast) {
print(day[1:3])  # Muestra las primeras 3 columnas (índices 1 a 3)
}
if (status_code(response) == 200) {
# Convertir la respuesta JSON a un formato de lista
weather_data <- fromJSON(content(response, "text", encoding = "UTF-8"))
# Extraer los datos de pronóstico
forecast <- weather_data$forecast$forecastday
forecast
# Mostrar solo las primeras 3 columnas (sin conversiones, solo extracción simple usando índices)
for (day in forecast) {
print(day[1:3])  # Muestra las primeras 3 columnas (índices 1 a 3)
}
} else {
# En caso de error, imprimir el código de estado
print(paste("Error:", status_code(response)))
}
day[1:3]
day[1:3]
